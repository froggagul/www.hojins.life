{"version":3,"file":"component---src-pages-series-tsx-8e11efe5417af917d26f.js","mappings":"gMASA,WAAe,OAAGA,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACb,uBAAKC,UAAU,uBACb,gBAAC,EAAAC,KAAD,CAAMC,GAAE,WAAaJ,GACfA,EADN,KACiBC,EADjB,KAFJ,E,UC0DA,EAvCmB,SAAC,GAMI,IAHlBI,EAGiB,EALrBC,KACEC,kBACEF,MAIEG,EAAmC,CAAC,EAO1C,OANAH,EAAMI,SAAQ,YAAe,IACnBT,EADkB,EAAXU,KACSC,OAAhBX,OACJA,IACFQ,EAAOR,GAAU,GAAKQ,EAAOR,IAAW,GAE3C,IAEC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKY,MAAM,WACVC,OAAOC,KAAKN,GAAQO,KAAI,SAACC,GAAD,OACvB,gBAAC,EAAD,CAAQhB,OAAQgB,EAAKf,MAAOO,EAAOQ,GAAMA,IAAKA,GADvB,IAK9B,C","sources":["webpack://hojin-s-note/./src/components/series.tsx","webpack://hojin-s-note/./src/pages/series.tsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport './series.sass';\n\ninterface SeriesProps {\n  series: string;\n  count: number;\n}\n\nexport default ({ series, count }: SeriesProps) => (\n  <div className=\"singleSeriesWrapper\">\n    <Link to={`/?query=${series}`}>\n      {`${series} (${count})`}\n    </Link>\n  </div>\n);\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport Series from '../components/series';\nimport SEO from '../components/seo';\n\ninterface IndexRouteProps {\n  data: {\n    allMarkdownRemark: {\n      edges: {\n        node: {\n          id: string,\n          html: string,\n          frontmatter: {\n            title: string,\n            date: string,\n            ep: number | string,\n          }\n          fields: {\n            path: string,\n            series?: string,\n          }\n        },\n      }[],\n    }\n  }\n}\n\nconst IndexRoute = ({\n  data: {\n    allMarkdownRemark: {\n      edges,\n    },\n  },\n}: IndexRouteProps) => {\n  const counts: { [id: string]: number } = {};\n  edges.forEach(({ node }) => {\n    const { series } = node.fields;\n    if (series) {\n      counts[series] = 1 + (counts[series] || 0);\n    }\n  });\n  return (\n    <Layout>\n      <SEO title=\"series\" />\n      {Object.keys(counts).map((key) => (\n        <Series series={key} count={counts[key]} key={key} />\n      ))}\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query MyQuery {\n    allMarkdownRemark {\n      edges {\n        node {\n          id\n          fields {\n            series\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default IndexRoute;\n"],"names":["series","count","className","Link","to","edges","data","allMarkdownRemark","counts","forEach","node","fields","title","Object","keys","map","key"],"sourceRoot":""}